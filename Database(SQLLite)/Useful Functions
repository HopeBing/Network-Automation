try:
    import sqlite3
except ImportError:
    print("Module SQLITE3 not available.")
    
def create_db():

    # Create database table.

    try:
        c.execute('''CREATE TABLE Automation (Device, DevType, Location, Status, DateTime, Time, Model, Serial)''')
        mydb.commit()
    except sqlite3.OperationalError:
        pass

def manual_entry():

    # Add new values to an exisiting database using input variables. Variables are arbitrary

    Device = input("Device: ")
    Location = input("Location: ")

    try:
        c.execute("INSERT INTO Automation VALUES ('%s','Protocol','%s', 'Unknown   ', '%s', '%s', '%s', '%s')"
                  % (Device, abbriviate, date.today(), time.strftime("%H:%M:%S ", "Model", "Serial")))
        mydb.commit()
    except sqlite3.OperationalError:
        pass
        
def delete_database():
    
    # Delete exisiting table from database
    
    try:
        c.execute('''DROP TABLE Automation''')
        mydb.commit()
    except sqlite3.OperationalError:
        pass

def find_entries()

            # Fins an entry in a database. Filter by variable input location by iterating/indexing. Variables are arbitrary
            
            location = input("Location: ")
            abbreviate = location[0:3].upper()

            # Loops through rows in the DB, prints filtered results

            try:
                headers()
                for row in c.execute('SELECT * FROM Automation WHERE Location=?', (abbreviate, )):
                    print("{:>0} {:>15} {:>19} {:>11} {:>14} {:>21} {:>17} {:>16} {:>15}".format(
                    "  ", row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7]))
                break
            except sqlite3.OperationalError:
                pass
                
 def delete_device():

    # Delete an entry from a database using input variable. Variables are arbitrary

    print("\n")
    device = input("Device: ", )
    print("\n")

    try:
        c.execute('DELETE FROM Automation WHERE Device=?', (device, ))
        mydb.commit()
    except sqlite3.OperationalError:
        pass
        
 def db_update():
    
    # Update a database entry
    
    try:
        d.execute("UPDATE Automation SET DevType=?, Time=?, DateTime=?, Status=?, Model=?, Serial=? WHERE Device=?",
                  (devtype, time.strftime("%H:%M:%S "), date.today(), status, model, serial, host))
        mydb.commit()
    except sqlite3.OperationalError:
        pass
        
  def cleanup_db():

    # Cleanup any duplicate DB entries, keeping the most current (max.) Min, or oldest entry can be used as well

    try:
        for row in c.execute('SELECT * FROM Automation'): # Cleanup any database duplicates
                c.execute('DELETE FROM Automation WHERE rowid not in (SELECT max(rowid) FROM Automation GROUP BY Device)')
                mydb.commit()
    except sqlite3.OperationalError:
        pass
