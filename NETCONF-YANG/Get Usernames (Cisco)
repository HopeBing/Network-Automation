try:
    from ncclient import manager
except ImportError:
    print("Module NCC Client not available.")
try:
    import ncclient
except ImportError:
    print("Module NCC Client not available.")
try:
    from socket import gaierror
except ImportError:
    print("Module socket not available.")

try:
    import xmltodict
except ImportError:
    print("Module xmltodict not available.")

def get_usernames():

    user_filter = """    <filter>
      <native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">
        <username/>
      </native>
    </filter>"""

    host = input("IP: ")

    device_connect(host)
    cred_get_reply = m.get(user_filter)

    cred_details = xmltodict.parse(cred_get_reply.xml)["rpc-reply"]["data"]
    cred_config = cred_details["native"]["username"]

    for item in cred_config:
        user = item

        print("")
        print("Username Details:")
        if "name" in user:
            print("  Username: {}".format(user["name"]))
        if "privilege" in user:
            print("  Priv: {}".format(user["privilege"]))
        if "encryption" in user:
            print("  Encryption: {}".format(user["password"]["encryption"]))
        if "password" in user:
            print("  Password: {}".format(user["password"]["password"]))
        if "encryption" in user:
            print("  Password: {}".format(user["secret"]["encryption"]))
        if "secret" in user:
            print("  Password: {}".format(user["secret"]["secret"]))

def device_connect(host):

        # NETCONF login

        try:

            global m
            m = manager.connect(host=host, port=830, timeout=3, username="cisco", password="cisco",
                                            device_params={'name': 'csr'})

        except ncclient.NCClientError:
            global_status = status_2
            pass
        except AttributeError:
            global_status = status_2
            pass
        except gaierror:
            global_status = status_2
            db_conn.start()
            pass


if __name__ == '__main__':

    get_usernames()
