try:
    from multiprocessing import Process
    import multiprocessing
except ImportError:
    print("Module multiprocessing not available.")
    
# The multiprocessing module is really useful when multiple devices need to be configured on once. RPC back and forth can be time
# consuming
# In the code below im applying port configurations on multiple switches using multiprocessing.
# NOTE -  If this module is not implemented correctly IT WILL CRASH YOUR COMPUTER. 
# The code shown below is just an example, use multiprocessing in any way you want. 


def L2_Core_edgePorts():

    while True:
        if not core_dict:
            empty_core_banner()
            break
        else:
            print("\n")
            print("|###############################################|")
            print("|   Applying Core  Edge Port Configurations...  |")
            print("|###############################################|")
            print("|     Configuration will run in background      |")
            print("|###############################################|")
            print("\n")
            for k, file in core_dict.items():
            
            # Start proccessing the core_interfaces function to K, which is the device IP. The loop will continue to the next
            # K, or IP and start the same function. This greatly decreases the runtime of the program
            
                multiproccesing_1(core_interfaces, k)  
            break


# This is the core_interfaces function which checks the switch interfaces for certain perameters, and apply the necessary configuration.
# Will also use the multiprocessing function here as well on line 93. Line 93 starts the application of configs.

def core_interfaces(k):

    int_dict = dict()

    root = xml.Element("config")
    root.set("xmlns", "urn:ietf:params:xml:ns:netconf:base:1.0")
    root.set("xmlns:xc", "urn:ietf:params:xml:ns:netconf:base:1.0")
    native_element = xml.Element("native")
    native_element.set("xmlns", "http://cisco.com/ns/yang/Cisco-IOS-XE-native")
    root.append(native_element)
    int_element = xml.SubElement(native_element, "interface")
    
loop_count = 0
    while loop_count != 3:
        try:
            config_data = m.get(interface_config)
            config_details = xmltodict.parse(config_data.xml)["rpc-reply"]["data"]
            global int_details
            int_details = config_details["native"]["interface"]["GigabitEthernet"]
            break
        except ncclient.operations.errors.TimeoutExpiredError:
            status_dict["Connectivity "] = "Connectivity Issue"
            device_connect(k)
            loop_count = loop_count + 1
            pass
            continue
        except (KeyError, NameError):
            status_dict["Connectivity "] = "Connectivity Issue"
            device_connect(k)
            loop_count = loop_count + 1
            pass
            continue

    for items in int_details:
        if "channel-group" not in items:
            int_dict["GigabitEthernet"] = items
            for interface, v in int_dict.items():
                if "name" in v and v["name"] != "0/0":

                    int_type = xml.SubElement(int_element, "GigabitEthernet")
                    int_phy = xml.SubElement(int_type, "name")
                    int_phy.text = v["name"]
                    span_element = xml.SubElement(int_type, "spanning-tree")
                    span_element.set("xmlns", "http://cisco.com/ns/yang/Cisco-IOS-XE-spanning-tree")
                    port_fast_element = xml.SubElement(span_element, "portfast")
                    shutdown = xml.SubElement(int_type, "shutdown")

                    try:
                        tree = xml.ElementTree(root)
                        with open("C:\Python\XML_Filters\Send_Config\Interface_Access_%s.xml" % k, "wb") as fh:
                            tree.write(fh)
                    except FileNotFoundError:
                        print("\n")
                        print("File Not Found")
                        pass
    
    
global_bpdu = """  
<config>
<native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">
<spanning-tree>
<portfast xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-spanning-tree">
<bdpu>bpduguard</bdpu>
<default/>
</portfast>
</spanning-tree>
</native>
</config>"""

     
# Multiprocessing shown below calls a function, or TARGET, and the ARGs of the function. 

proccess = Process(target=send_config_file, args=("C:\Python\XML_Filters\Send_Config\Interface_Access_%s.xml" % k, "Port", k, ))
proccess.start()
proccess = Process(target=send_variable_config, args=(global_bpdu, "BPDU", k, )) 
proccess.start()

#In summary, i stack funtions for multiprocessing and ran the functions at the same time.

# So i can:

# Login into multiple devices via NCCLIENT at once
# Run my port check function on the devices at once
# Apply the necessary configuration at once.
# I can even run background proccess so I can multitask


