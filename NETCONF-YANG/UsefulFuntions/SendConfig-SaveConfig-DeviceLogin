Modules:

try:
    from ncclient import manager
except ImportError:
    print("Module NCC Client not available.")
try:
    import ncclient
except ImportError:
    print("Module NCC Client not available.")
try:
    from ncclient.operations import RPCError
except ImportError:
    print("Module NCC Client not available.")



# Netconf Login
# Three login attempts

def device_connect():

    device_input = input("Please enter device IP: ")
    
    loop_count = 0
    while loop_count != 3:
        try:

            global m
            m = manager.connect(host=device_input, port=830, username="cisco", password="cisco",
                                             device_params={'name': 'csr'})
            break

        except AttributeError:
            loop_count = loop_count + 1
            pass
            continue
        except ncclient.NCClientError:
            loop_count = loop_count + 1
            pass
            continue
        except gaierror:
            loop_count = loop_count + 1
            pass
            continue

# This function sends a configuration to a device. 
# It will try to send three times.
# It logs expceptions/errors to a dictionary for later use.

def send_config_file():

    device_connect()

    loop_count = 0
    while loop_count != 3:
        try:

            config_file = open(classmap_file).read()
            m.edit_config(config_file, target="running")
            status_dict["Great"] = "Configuration Successful"
            save_configuration()
            break
        except ncclient.operations.RPCError:
            status_dict["Syntax Error"] = "Syntax Error"
            loop_count = loop_count + 1
            pass
            continue
        except ncclient.operations.errors.TimeoutExpiredError:
            status_dict["Connectivity "] = "Connectivity Issue"
            loop_count = loop_count + 1
            pass
            continue
        except (KeyError, NameError):
            status_dict["Connectivity "] = "Connectivity Issue"
            loop_count = loop_count + 1
            pass
            continue
 
 # This functions is to save the configuration via NETCONF. 
 # I've called this function in the above send config function. 

 
 # Save paload variable
 
 save_payload = """
               <cisco-ia:save-config xmlns:cisco-ia="http://cisco.com/yang/cisco-ia"/>
               """
 
 def save_configuration():

    try:
        response = m.dispatch(ET.fromstring(save_payload))
    except ncclient.NCClientError:
        pass
    except (TypeError, NameError):
        print("\n")
        pass
