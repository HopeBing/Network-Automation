# Find endpoints within the fabric. This works much quicker that APIC GUI. You will need to be logged into the apic first via
# the APIC_Login functions.

def enpoint_tracker():
    
    get_file= "C:\Python\ACI\Get_ACI.xml" # writed all GET request to this file for searching and outputing
    
    endpoint = input("Please enter an endpoint: ")
    headers = {'content-type': 'text/xml'}
    uri = "https://%s" % apic + "/api/node/class/fvCEp.xml?rsp-subtree=full&rsp-subtree-class=fvCEp,fvRsCEpToPathEp,fvIp,fvRsHyper,fvRsToNic,fvRsToVm&query-target-filter=eq(fvCEp.mac," + "\"%s\"" % endpoint

    try:
        r = session.get(uri,verify=False, headers=headers)
        print("\n")

        file= open(get_file, 'w')
        file.write(r.text)
        file.close()

        tree = ET.parse('C:\Python\ACI\Get_ACI.xml')
        root = tree.getroot()

        print("Endpoint: %s " % endpoint)
        print("\n")
        for fvCEp in root.iter("fvCEp"): # Iterates through variable "get_file" and outputs in on line #32
            ep_name = fvCEp.get("name")
            ep_mac = fvCEp.get("mac")
            encap = fvCEp.get("encap")
            ep_loc = fvCEp.get("dn")
            ep_ip = fvCEp.get("ip")

            print("Name: {0:20} EP MAC: {1:<20} Encapsulation: {2:<20} Location: {3:<20} IP: {4:<20}".format(ep_name, ep_mac, encap, ep_loc, ep_ip))
            print("\n")

            for fvRsCEpToPathEp in root.iter("fvRsCEpToPathEp"): # Finds where the enpoint is attached and prints path
                endp_path = fvRsCEpToPathEp.get("tDn")
                print("Path: %s" % endp_path)

    except UnboundLocalError:
        print("403 Forbidden - Please log into APIC to vew or push configurations")
        print("\n")
        apic_login()
    except NameError:
        print("403 Forbidden - Please log into APIC to vew or push configurations")
        print("\n")
        apic_login()
